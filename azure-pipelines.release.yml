name: $(SourceBranchName)-$(date:yyyyMMdd)$(rev:.r)
trigger:
  branches:
    include:
    - master
    - release/*
pr: none

pool:
  vmImage: 'windows-2019'
  
steps:
- template: azure-pipelines/install-dependencies.yml
- template: azure-pipelines/get-version.yml

# Restore dependencies
- task: NuGetCommand@2
  displayName: 'Restore Dependencies'
  inputs:
    command: 'restore'
    solution: 'Solution.sln'

# Build
# We're using MSBuild instead of dotnet cli because of: https://github.com/Microsoft/msbuild/issues/2221
- task: MSBuild@1
  displayName: 'Build Vha.Chat.csproj'
  inputs:
    solution: 'Vha.Chat/Vha.Chat.csproj'
    msbuildArchitecture: 'x64'
    configuration: 'Release'
    maximumCpuCount: true

# Package and upload binaries
- task: MSBuild@1
  displayName: 'Publish Vha.Chat.csproj'
  inputs:
    solution: 'Vha.Chat/Vha.Chat.csproj'
    msbuildArchitecture: 'x64'
    configuration: 'Release'
    msbuildArguments: '/t:Publish /p:PublishDir=$(Build.StagingDirectory)/bin'
    maximumCpuCount: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Binaries'
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)/bin'
    ArtifactName: bin

# Package and upload distributables
- task: ArchiveFiles@2
  displayName: 'Create Release Package'
  inputs:
    rootFolderOrFile: '$(Build.StagingDirectory)/bin'
    includeRootFolder: false
    archiveFile: '$(Build.StagingDirectory)/dist/Vha.Chat-$(GitBuildVersion).zip'

- script: makensis /DVersion=$(GitBuildVersion) /DBinDir=$(Build.StagingDirectory)/bin /DDistDir=$(Build.StagingDirectory)/dist azure-pipelines/installer.nsi
  displayName: 'Create Installer'
  
- task: PublishBuildArtifacts@1
  displayName: 'Publish Release Package'
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)/dist'
    ArtifactName: dist
